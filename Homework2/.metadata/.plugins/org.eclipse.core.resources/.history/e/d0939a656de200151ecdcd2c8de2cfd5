import java.awt.Point;
import java.util.*;
import world.*;

public class RobotTravel extends Robot{
	Point start;
	Point destination;
	boolean uncertainty;
	int cols;
	int rows;
	Map<Point, Point> cameFrom;
	static List<Point> evaluated;
	static List<Point> notEvaluated;
	public RobotTravel(Point st, Point dest, boolean u, int c, int r) {
		super();
		start = st;
		destination = dest;
		uncertainty = u;
		cols = c;
		rows = r;
	}
	
	@Override
	public void travelToDestination() {
		if (!uncertainty) {
			List<Point> path = AStar(start, destination);
			System.out.println("Path: " + path.toString());
			if (!path.isEmpty() && path != null) {
				for(int i = 0; i < path.size(); i++) {
					super.move(path.get(i));
				}
			} else {
				System.out.println("You were either at the destination already or there wasn't a valid path to get there!");
			}
			
		}
		else {
			
		}
	}
	
	public List<Point> AStar(Point st, Point go) {
		
		evaluated = new ArrayList<Point>();
		notEvaluated = new ArrayList<Point>();
		notEvaluated.add(st);
		cameFrom = new HashMap<Point, Point>();
		
		Map<Point, Double> gScore = new HashMap<Point, Double>();
		//Put default value of positive infinity into map
		for (int i = 0; i < rows; i++) { //x axis
			for (int j = 0; j < cols; j++) { //y axis
				gScore.put(new Point(i, j), Double.POSITIVE_INFINITY);
			}
		}
		gScore.put(st, 0.0);
		System.out.println("gScores: " + gScore.toString());
		
		Map<Point, Double> fScore = new HashMap<Point, Double>();
		//Put default value of positive infinity into map
		for (int i = 0; i < rows; i++) {
			for (int j = 0; j < cols; j++) {
				fScore.put(new Point(i, j), Double.POSITIVE_INFINITY);
			}
		}		
		fScore.put(st, heuristic(st, go));
		System.out.println("fScores: " + fScore.toString());
		
		//Switch != and == to turn loop on and off
		int bigWhile = 0;
		while (notEvaluated.isEmpty() == false) {
			
			//System.out.println(notEvaluated.toString());
			System.out.println("----------------------------------------------------------------");
			System.out.println("Iteration of big while loop: " + bigWhile++);
			System.out.println("Came From: " + cameFrom.toString());
			System.out.println("Start: " + st.toString());
			
			double lowestCurrentScore = Collections.min(fScore.values());
			Point current = (Point) getKeyFromValue(fScore, lowestCurrentScore);
			
			if (current == null) { 
				System.out.println("Lowest current fScore: " + lowestCurrentScore);
				System.out.println("fScores: " + fScore.toString());
				System.out.println("Current is null"); break; 
			}
			System.out.println("Lowest current fScore: " + lowestCurrentScore);
			System.out.println("fScores: " + fScore.toString());
			//current.equals(destination)
			
			if ((int) current.getX() == (int) go.getX() && (int) current.getY() == (int) go.getY()) {
				return reconstructPath(cameFrom, go);
			}
			
			/*if (notEvaluated.contains(current))*/ notEvaluated.remove(current);
			/*if (!evaluated.contains(current))*/ evaluated.add(current);
			System.out.println("Current: " + current.toString());
			
			//Generate adjacents
			List<Point> adj = new ArrayList<Point>();
			Point nw = new Point((int) current.getX() - 1, (int) current.getY() - 1);
			Point ne = new Point((int)current.getX() - 1, (int)current.getY() + 1);
			Point n = new Point((int)current.getX() - 1, (int)current.getY());
			Point w = new Point((int)current.getX(), (int)current.getY() - 1);
			Point sw = new Point((int)current.getX() + 1, (int)current.getY() - 1);
			Point s = new Point((int)current.getX() + 1, (int)current.getY());
			Point se = new Point((int)current.getX() + 1, (int)current.getY() + 1);
			Point ea = new Point((int)current.getX(), (int)current.getY() + 1);
			adj.add(nw); adj.add(ne); adj.add(n); adj.add(w);
			adj.add(sw); adj.add(s); adj.add(se); adj.add(ea);
			System.out.println("All adj before pinging: " + adj.toString());
			//Iterator<Point> i = adj.iterator(); i.hasNext();
			//for (int i = 0; i < adj.size(); i++) {
			Iterator<Point> i = adj.iterator();
			while (i.hasNext()) {
				//Point el = adj.get(i);
				Point el = i.next();
				if (super.pingMap(new Point((int)el.getX(), (int)el.getY())) == null) {
					System.out.println(el.toString());
					//adj.remove(el);
					//i--;
					i.remove();
				}
//				else if (super.pingMap( new Point( (int)el.getX(), (int)el.getY() ) ) .equals("X")){
//					System.out.println(el.toString());
//					//adj.remove(el);
//					//i--;
//					i.remove();
//				}
			} //Allowable adjacents fully generated
			System.out.println("Allowable adjacents fully generated.");
			System.out.println("Allowable adjacents: " + adj.toString());
			//Now, for each neighbor of adjacent
			double tentative_gScore;
			int counter = 0;
			for (Point neighbor: adj) {
				System.out.println(counter++);
				System.out.println(heuristic(current, neighbor));
				//if(!super.pingMap(neighbor).equals("X")){
					//weighted such that straight paths add less weight and diagonal paths add more weight
					tentative_gScore = gScore.get(current) + heuristic(current, neighbor);
					if (notEvaluated.contains(neighbor) && tentative_gScore < gScore.get(neighbor)) {
						notEvaluated.remove(neighbor);
						//if(!evaluated.contains(neighbor)) evaluated.add(neighbor);
					}
					else if (evaluated.contains(neighbor) && tentative_gScore < gScore.get(neighbor)) {
						evaluated.remove(neighbor);
						//if(!notEvaluated.contains(neighbor)) notEvaluated.add(neighbor);
					}

					else if (!notEvaluated.contains(neighbor) && !evaluated.contains(neighbor)) {
						System.out.println("Being run");
						
						//tentative_gScore = gScore.get(current) + heuristic(current, neighbor);
						cameFrom.put(neighbor, current);
						gScore.put(neighbor, tentative_gScore);
						double h = gScore.get(neighbor) + heuristic(neighbor, go);
						while (fScore.values().contains(h))
							h *= 0.999;
						fScore.put(neighbor, gScore.get(neighbor) + heuristic(neighbor, go));
						notEvaluated.add(neighbor);
					}
//					else {
//						notEvaluated.add(neighbor);
//					}
				//}


//				if (evaluated.contains(neighbor)) {
//					System.out.println("Neighbor already evaluated!");
//					continue;
//				}
//				//tentative_gScore = gScore.get(current) + current.distance(neighbor);
//				//tentative_gScore = gScore.get(current) + heuristic(current, neighbor);
//				tentative_gScore = gScore.get(current) + manhattan(current, neighbor);
//				System.out.println("Tentative gScore of " + neighbor.toString() + ": "+tentative_gScore);
//				if (!notEvaluated.contains(neighbor)) {
//					System.out.println("Neighbor added to notEvaluated.");
//					notEvaluated.add(neighbor);
//				}
//				if (tentative_gScore >= gScore.get(neighbor)) {
//					System.out.println("tentative_gScore >= neighbor gScore");
//					continue;
//				}
//				if (!super.pingMap(neighbor).equals("X")) {
//					if (!notEvaluated.contains(neighbor)) notEvaluated.add(neighbor);
//					tentative_gScore = gScore.get(current) + manhattan(current, neighbor);
//					cameFrom.put(neighbor, current);
//					//cameFrom.put(current, neighbor);
//					gScore.put(neighbor, tentative_gScore);
//					double h = gScore.get(neighbor) + heuristic(neighbor, go);
//					//Tiebreaking. This reduces this current path's fScore, because it's the most efficient thus far.
//					while (fScore.values().contains(h))
//						h *= 0.999;
//					fScore.put(neighbor, h);
//					
//					System.out.println("fScore of neighbor: " + fScore.get(neighbor).toString());
//				}
			}
			System.out.println("Not Evaluated Nodes: " + notEvaluated.toString());
			System.out.println("Evaluated Nodes: " + evaluated.toString());
		}
		System.out.println("While loop exited, with failure.");
		return new ArrayList<Point>();
	}
	public List<Point> reconstructPath(Map<Point, Point> cameFrom, Point current) {
		List<Point> totalPath = new ArrayList<Point>();
		totalPath.add(current);
		while (cameFrom.keySet().contains(current)) {
			current = cameFrom.get(current);
			totalPath.add(current);
			System.out.println("Path Reconstructing...");
		}
		Collections.reverse(totalPath);
		return totalPath;
	}
	
	//Modified Manhattan distance allowing for diagonal
	public Double heuristic(Point p, Point d) {
		double dx = Math.abs(p.getX() - d.getX());
		double dy = Math.abs(p.getY() - d.getY());
		return dx + dy + (-1)*Math.min(dx, dy);
		//return Math.max(dx, dy);
		//return p.distance(d);
	}
	//Pure Manhattan distance
	public Double manhattan(Point p, Point d) {
		double dx = Math.abs(p.getX() - d.getX());
		double dy = Math.abs(p.getY() - d.getY());
		return dx + dy;
		//return Math.max(dx, dy);
		//return p.distance(d);
	}

	//Taken from Stackoverflow: 
	//http://stackoverflow.com/questions/1383797/java-hashmap-how-to-get-key-from-value/28415495#28415495
	public static Object getKeyFromValue(Map<Point, Double> hm, Object value) {
        for (Object o : hm.keySet()) {
          if (hm.get(o).equals(value)) {
        	  if (!evaluated.contains(o))
        	  //if(notEvaluated.contains(o))
        		  return o;
          }
        }
        return null;
    }
    
}

//public Double distBetween(Point current, Point neighbor) {
//current.distance(neighbor);
//return current.distance(neighbor);
//}

//public int getCols() {
//return cols;
//}
//
//public void setCols(int cols) {
//this.cols = cols;
//}
//
//public int getRows() {
//return rows;
//}
//
//public void setRows(int rows) {
//this.rows = rows;
//}

//tentative_gScore = gScore.get(current) + heuristic(current, neighbor);
//if (notEvaluated.contains(neighbor) && tentative_gScore < gScore.get(neighbor)) {
//	notEvaluated.remove(neighbor);
//	if(!evaluated.contains(neighbor)) evaluated.add(neighbor);
//}
//if (evaluated.contains(neighbor) && tentative_gScore < gScore.get(neighbor)) {
//	evaluated.remove(neighbor);
//}
//if (!notEvaluated.contains(neighbor) && !evaluated.contains(neighbor)) {
//	cameFrom.put(neighbor, current);
//	gScore.put(neighbor, tentative_gScore);
//	fScore.put(neighbor, gScore.get(neighbor) + heuristic(neighbor, go));
//	notEvaluated.add(neighbor);
//	
//}
//if (!notEvaluated.contains(neighbor) && !evaluated.contains(neighbor)) {
//	System.out.println("Being run");
//	notEvaluated.add(neighbor);
//	tentative_gScore = gScore.get(current) + heuristic(current, neighbor);
//	cameFrom.put(neighbor, current);
//	gScore.put(neighbor, tentative_gScore);
//	fScore.put(neighbor, gScore.get(neighbor) + heuristic(neighbor, go));					
//}
