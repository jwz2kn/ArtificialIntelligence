import java.awt.Point;
import java.util.*;
import world.*;
public class RobotTravel extends Robot{
	Point start;
	Point destination;
	boolean uncertainty;
	int cols;
	int rows;
	Queue<Coordinate> coordinates;
	int[][] map;
	public RobotTravel(Point st, Point dest, boolean u) {
		super();
		start = st;
		destination = dest;
		uncertainty = u;
		coordinates = new LinkedList();
		map = new int[rows][cols];
	}
	
	@Override
	public void travelToDestination() {
		if (!uncertainty) {
//			super.getPosition();
//			System.out.println("travelToDestinaton is called");
//			System.out.println("Destination Coordinate: "
//					+"(" +destination.getX() + ", " + destination.getY() + 
//					") Destination String: "+super.pingMap(destination));
//			super.pingMap(destination);
//			System.out.println(super.pingMap(new Point(2,2)));
			
			Coordinate end = new Coordinate((int) destination.getX(), (int)destination.getY(), 0);
			coordinates.add(end);
			System.out.println(coordinates.element().toString());
			for (Coordinate e : coordinates) {
				List<Coordinate> adj = new ArrayList<Coordinate>();
				Coordinate nw = new Coordinate(e.getX() - 1, e.getY() - 1, e.getCounter() + 1);
				
				
			}
		}
		else {
			
		}
	}

	public int getCols() {
		return cols;
	}

	public void setCols(int cols) {
		this.cols = cols;
	}

	public int getRows() {
		return rows;
	}

	public void setRows(int rows) {
		this.rows = rows;
	}
}
